{"version":3,"sources":["angular-stomp.es6.js"],"names":["_createClass","defineProperties","target","props","key","prop","configurable","value","writable","Object","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","ngstompProvider","this","settings","connectWithHeaders","flag","shouldConnectWithHeaders","credential","login","password","setHeaders","headers","url","_url","_urlWrapper","_x","apply","arguments","toString","class","clazz","settingsObject","debug","boolean","vhost","host","$get","$q","$log","$rootScope","ngStompWebSocket","stompClient","Stomp","over","client","connections","deferred","defer","promiseResult","promise","connectWithPasscode","_this","connect","resolve","$digestStompAction","reject","subscribe","callback","scope","then","$stompSubscribe","unRegisterScopeOnDestroy","unsubscribe","$stompUnSubscribe","send","queue","data","header","sendDeffered","JSON","stringify","disconnect","disconnectionPromise","self","subscription","push","indexToRemove","i","len","length","splice","$$phase","$apply","undefined","angular","isFunction","$on","module","provider"],"mappings":"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","file":"angular-stomp.min.js","sourcesContent":["class ngstompProvider {\n\n    constructor() {\n        this.settings = {};\n    }\n\n    connectWithHeaders(flag) { \n        this.settings.shouldConnectWithHeaders = flag;\n        return this;\n    }\n\n    credential(login, password) {\n        this.settings.login = login;\n        this.settings.password = password;\n        return this;\n    }\n\n    setHeaders(headers) {\n        this.settings.headers = headers; \n        return this;\n    }\n\n    url(url) {\n        this.settings.url = url;\n        return this;\n    }\n\n    class(clazz) {\n        this.settings.class = clazz;\n        return this;\n    }\n\n    settings(settingsObject) {\n        this.settings = settingsObject;\n        return this;\n    }\n\n    debug(boolean) {\n        this.settings.debug = boolean;\n        return this;\n    }\n\n    vhost(host) {\n        this.settings.vhost = host;\n        return this;\n    }\n\n    /* @ngInject */\n    $get($q, $log, $rootScope) {\n        return new ngStompWebSocket(this.settings, $q, $log, $rootScope);\n    }\n}\nclass ngStompWebSocket {\n\n    /*@ngNoInject*/\n    constructor(settings, $q, $log, $rootScope) {\n        this.settings = settings;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n\n        this.stompClient = settings.class ? Stomp.over(new settings.class(settings.url)) : Stomp.client(settings.url);\n        this.stompClient.debug = (settings.debug) ? $log.debug : function () {};\n\n        this.connections = [];\n        this.deferred = this.$q.defer();\n        this.promiseResult = this.deferred.promise;\n\n        if (this.shouldConnectWithHeaders) {\n            this.connectWithHeaders();\n        } else {\n            this.connectWithPasscode();\n        }\n    }\n\n    connectWithPasscode() {\n        this.stompClient.connect(\n            this.settings.login,\n            this.settings.password,\n            () => {\n                this.deferred.resolve();\n                this.$digestStompAction();\n            },\n            () => {\n                this.deferred.reject();\n                this.$digestStompAction();\n            },\n            this.settings.vhost\n        );\n        return this.promiseResult;\n    }\n\n    connectWithHeaders() {\n        this.stompClient.connect(\n            this.settings.headers,\n            () => {\n                this.deferred.resolve();\n                this.$digestStompAction();\n            },\n            () => {\n                this.deferred.reject();\n                this.$digestStompAction();\n            }\n        );\n    }\n\n    subscribe(url, callback, scope) {\n        this.promiseResult.then(() => {\n            this.$stompSubscribe(url, callback);\n            this.unRegisterScopeOnDestroy(scope, url);\n        });\n        return this;\n    }\n\n    unsubscribe(url) {\n        this.promiseResult.then(() => this.$stompUnSubscribe(url));\n        return this;\n    };\n\n    send(queue, data, header) {\n        let sendDeffered = this.$q.defer();\n\n        this.promiseResult.then(() => {\n            this.stompClient.send(queue, header || {}, JSON.stringify(data));\n            sendDeffered.resolve();\n        });\n\n        return sendDeffered.promise;\n    };\n\n    disconnect() {\n        let disconnectionPromise = this.$q.defer();\n        this.stompClient.disconnect(() => {\n            disconnectionPromise.resolve();\n            this.$digestStompAction();\n        });\n\n        return disconnectionPromise.promise;\n    }\n\n    $stompSubscribe(queue, callback) {\n        let self = this;\n        let subscription = self.stompClient.subscribe(queue, function() {\n            callback.apply(self.stompClient, arguments);\n            self.$digestStompAction()\n        });\n        this.connections.push({url: queue, subscription: subscription});\n    }\n\n    $stompUnSubscribe(queue) {\n        let indexToRemove = false;\n        for (var i = 0, len = this.connections.length; i < len; i++) {\n            if (this.connections[i].url === queue) {\n                indexToRemove = i;\n                this.connections[i].subscription.unsubscribe();\n                break;\n            }\n        }\n        if (indexToRemove !== false) {\n            this.connections.splice(indexToRemove, 1);\n        }\n    }\n\n    $digestStompAction() {\n        !this.$rootScope.$$phase && this.$rootScope.$apply();\n    }\n\n    unRegisterScopeOnDestroy(scope, url) {\n        if (scope !== undefined && angular.isFunction(scope.$on))\n            scope.$on('$destroy', () => this.unsubscribe(url) );\n    }\n}\nangular.module('AngularStompDK', [])\n    .provider('ngstomp', ngstompProvider);\n"],"sourceRoot":"/source/"}